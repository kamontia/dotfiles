# ~/.zshrc

# 1. 環境変数
# GOPATHの設定
export GOPATH=$HOME/go
# PATHにGOPATH/binを追加
export PATH=$PATH:$GOPATH/bin
# ユーザーローカルのbinディレクトリをPATHに追加 (miseのインストール先など)
if [[ ":$PATH:" != *":$HOME/.local/bin:"* ]]; then
  export PATH="$HOME/.local/bin:$PATH"
fi
# nvimのパスを追加
export PATH="/opt/nvim-linux64/bin/:$PATH"

# 2. 補完システムコア初期化
# Zshの補完システムを初期化します。
# これを早期に実行することで、後続のプラグインや設定が compdef を利用できるようになります。
autoload -Uz compinit
# ~/.zcompdump ファイルのパーミッションが安全でない場合のエラーを抑制し(-i)、
# ダンプファイルの場所を明示的に指定します(-d)。
# 1日に1回だけ zcompdump を再生成するようにする
if [ $(date +%j) != $(date +%j -r ~/.zcompdump 2>/dev/null) ]; then
  compinit -i -d ~/.zcompdump
else
  compinit -C -i -d ~/.zcompdump # キャッシュを使う
fi

# 3. mise (旧 rtx) バージョンマネージャー と 必須ツール管理
# miseがインストールされていなければインストールを試みる
if ! command -v mise &> /dev/null; then
  echo "mise が見つかりません。インストールを試みます..."
  if command -v curl &> /dev/null; then
    # miseの公式インストールスクリプトを実行 (冪等性あり)
    curl -fsSL https://mise.run | sh
    # インストール後、miseコマンドが利用可能か再確認
    if [[ -x "$HOME/.local/bin/mise" ]]; then
        export PATH="$HOME/.local/bin:$PATH" # PATHを即時反映
    fi

    if ! command -v mise &> /dev/null; then
      echo "mise のインストールに失敗したか、PATHが正しく設定されていません。" >&2
      echo "シェルを再起動するか、手動でPATHを確認してください: export PATH=\"\$HOME/.local/bin:\$PATH\"" >&2
      echo "詳細は https://mise.jdx.dev/getting-started.html を参照してください。" >&2
    else
      echo "mise のインストール/確認が完了しました。設定を有効にするため、一度シェルを再起動するか、`source ~/.zshrc` を実行してください。"
      # 初回インストール時は mise activate をここで実行できるようにする
      eval "$(mise activate zsh)"
    fi
  else
    echo "curl コマンドが見つかりません。miseのインストールにはcurlが必要です。" >&2
    echo "手動でmiseをインストールしてください: https://mise.jdx.dev/getting-started.html" >&2
  fi
fi

# mise activate zsh を実行して、miseをシェルに統合します。
# これにより、shimsのパス設定や補完が自動的に行われます。
# compinit が先に実行されているため、mise activate が compdef を使用する場合も安全です。
if command -v mise &> /dev/null; then
  eval "$(mise activate zsh)"

  # --- mise経由での必須ツールインストールとグローバル設定 ---
  # 指定されたツールがmiseによってグローバルバージョンとして認識されていなければ、
  # mise use --global <tool>@latest でインストール・設定
  local tools_to_ensure=("eza" "ghq" "fzf" "starship")
  for tool_name in "${tools_to_ensure[@]}"; do
    # mise current "$tool_name" でグローバルバージョンが設定されているか確認
    if ! mise current "$tool_name" &> /dev/null; then
      echo "'$tool_name' の有効なグローバルバージョンがmiseに設定されていません。miseを使用してインストールおよびグローバル設定します..."
      if mise use --global "$tool_name@latest"; then
        echo "'$tool_name' のインストールとグローバル設定が完了しました。"
      else
        echo "'$tool_name' のインストールまたはグローバル設定に失敗しました。" >&2
      fi
    fi
  done
  # --- ここまでツールインストール ---
else
  # mise コマンドが見つからない、または activate に失敗した場合のメッセージ
  if [ -x "$HOME/.local/bin/mise" ]; then
     echo "mise はインストールされているようですが、シェルへの統合(activate)に失敗しました。" >&2
     echo "シェルを再起動するか、miseのドキュメントを確認してください。" >&2
  elif ! command -v curl &> /dev/null; then
    : # curlがない場合はインストール試行中のメッセージでカバーされる
  else
     echo "mise コマンドが見つかりません。上記のインストール処理を確認してください。" >&2
  fi
fi

# 4. Starship プロンプト
# Starshipの初期化 (miseでインストールされた場合もここで有効になる)
if command -v starship &> /dev/null; then
  eval "$(starship init zsh)"
fi

# 5. Zinit プラグインマネージャー
# Zinitがインストールされていなければインストールする
if [[ ! -f "$HOME/.local/share/zinit/zinit.git/zinit.zsh" ]]; then
    print -P "%F{33} %F{220}Installing %F{33}ZDHARMA-CONTINUUM%F{220} Initiative Plugin Manager (%F{33}zdharma-continuum/zinit%F{220})…%f"
    command mkdir -p "$HOME/.local/share/zinit" && command chmod g-rwX "$HOME/.local/share/zinit"
    command git clone https://github.com/zdharma-continuum/zinit "$HOME/.local/share/zinit/zinit.git" && \
        print -P "%F{33} %F{34}Installation successful.%f%b" || \
        print -P "%F{160} The clone has failed.%f%b"
fi

# Zinitを読み込む (compinit が先に実行されているため、Zinitプラグインが compdef を使用する場合も安全)
source "$HOME/.local/share/zinit/zinit.git/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit

# Zinitプラグインの読み込み
zinit load zdharma-continuum/history-search-multi-word
zinit light zsh-users/zsh-autosuggestions
zinit light zdharma-continuum/fast-syntax-highlighting

# 7. 個別コマンド補完の読み込み
# 以下の補完設定は、各コマンドがmise等でPATHに通っており、かつcompinitが実行された後に読み込まれます。
# Podman 補完
if command -v podman &> /dev/null; then
  source <(podman completion zsh)
fi
# kubectl 補完
if command -v kubectl &> /dev/null; then
  source <(kubectl completion zsh)
fi
# gh (GitHub CLI) 補完
if command -v gh &> /dev/null; then
  eval "$(gh completion -s zsh)"
fi
# mise 自身の補完は `eval "$(mise activate zsh)"` に含まれるか、ここで明示的に source する必要があるかもしれません。
# (通常 `mise activate` で処理されます)

# 8. エイリアス
# 8.1. Podman (Dockerの代替)
# alias docker='podman'
# alias docker-compose='podman-compose'

# 8.2. 一般的なエイリアス
# alias vim="nvim"
# alias nvim="lvim"

# 8.3. モダンな 'ls' の代替 (eza)
if command -v eza &> /dev/null; then
  alias ls='eza --icons --git --group-directories-first'
  alias e='eza --icons --git --group-directories-first'
  alias la='eza --all --icons --git --group-directories-first'
  alias ll='eza --long --all --header --git --icons --group-directories-first'
  alias lt='eza --tree --level=3 --all --ignore-glob="node_modules|.git|.cache" --icons'
  alias lta='eza --tree --all --ignore-glob="node_modules|.git|.cache" --color=always --icons | less -r'
  alias l='clear && ls'
elif command -v lsd &> /dev/null; then
  alias ls='lsd --icon=auto'
  alias ll='lsd -lAh --icon=auto'
  alias la='lsd -A --icon=auto'
  alias lt='lsd --tree --depth=3 -A --ignore-glob="node_modules|.git|.cache" --icon=auto'
  alias l='clear && ls'
else
  alias ls='ls --color=auto -F'
  alias ll='ls -lAhF'
  alias la='ls -AF'
  alias l='clear && ls'
fi

# 8.4. Kubectl エイリアス
[ -f ~/.kubectl_aliases ] && source ~/.kubectl_aliases

# 9. 関数
# 9.1. ghqで管理しているプロジェクトにfzfを使ってcdする関数
function ghq-fzf() {
  if ! command -v ghq &> /dev/null; then echo "ghq コマンドが見つかりません。" >&2; return 1; fi
  if ! command -v fzf &> /dev/null; then echo "fzf コマンドが見つかりません。" >&2; return 1; fi

  local repo_root
  repo_root=$(ghq root 2>/dev/null)
  if [ -z "$repo_root" ] || [ ! -d "$repo_root" ]; then
    echo "ghq root が見つからないか、設定されていません。" >&2
    return 1
  fi

  local bat_cmd
  if command -v bat &> /dev/null; then
    bat_cmd="bat --color=always --style=header,grid --line-range :80"
  else
    bat_cmd="head -n 80"
  fi

  local src
  src=$(ghq list | fzf --layout=reverse --preview "$bat_cmd $repo_root/{}/(README|readme|README.md|readme.md)(N.) 2>/dev/null || ls -p $repo_root/{}/ | head -n 30")

  if [ -n "$src" ]; then
    BUFFER="cd $repo_root/$src"
    zle accept-line
  fi
  zle -R -c
}
zle -N ghq-fzf
bindkey '^]' ghq-fzf

# 10. Zsh オプション (setopt)
setopt extended_glob
# setopt print_eight_bit # UTF-8環境では通常不要

# 履歴関連
HISTFILE=~/.zsh_history
HISTSIZE=100000
SAVEHIST=100000
setopt share_history
setopt hist_ignore_dups
setopt hist_ignore_all_dups # 履歴全体から重複を削除 (古いものから)
setopt hist_reduce_blanks
setopt append_history

# その他オプション
setopt auto_pushd
setopt pushd_ignore_dups
setopt auto_cd
setopt correct              # コマンドのtypoを修正 (お好みで)
setopt correct_all          # 全ての引数に対してtypo修正を試みる (より積極的)

# 補完スタイル
zstyle ':completion:*:default' menu select=1

# --- ここまで ---
# ローカル設定などがあれば読み込む
# if [ -f ~/.zshrc.local ]; then
#   source ~/.zshrc.local
# fi

